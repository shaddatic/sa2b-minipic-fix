/*
*   Sonic Adventure Mod Tools (SA2B) - '/config.h'
*
*   Description:
*       For loading, reading, modifying, & saving '.ini' configuration files. The
*   most common use is reading user-config files generated by the Mod Manager.
*
*   Contributors:
*     - Shaddatic
*
*   Only for use with Sonic Adventure 2 for PC
*/
#ifndef H_SAMT_CONFIG
#define H_SAMT_CONFIG

EXTERN_START

/************************/
/*  Abstract Types      */
/************************/
typedef struct config     config;

/************************/
/*  Open, Close, Save   */
/************************/
/****** Open ************************************************************************/
/*
*   Open a .ini configuration file at 'fpath'. 'ConfigOpen2' is used to concatonate
*   the folder & name of the file, eg. "'fpath'/'fname'".
*
*   Examples:
*       ConfigOpen("./path/to/config.ini")
*       ConfigOpen2(GetModPath(), "config.ini")
*
*   Parameters:
*     - fpath   : File path to configuration file
*     - fname   : Name of configuration file
*
*   Returns:
*       A new config object pointer with the contents of the file.
*/
config* ConfigOpen(  const utf8* fpath                    );
config* ConfigOpen2( const utf8* fpath, const utf8* fname );

/****** Close ***********************************************************************/
/*
*   Close & free an existing config object. Any changes will not be automatically
*   saved to disk.
*
*   Parameters:
*     - pConfig : Pointer to a 'config' object
*/
void    ConfigClose( config* pConfig );

/****** Save ************************************************************************/
/*
*   Save an existing config object to disk. By default, it will overwrite the file
*   it was created from, however 'ConfigSaveAs' can be used to save to an arbirary
*   path.
*
*   Parameters:
*     - pConfig : Pointer to a 'config' object
*     - fpath   : New path to save to
*/
void    ConfigSave(   const config* pConfig                    );
void    ConfigSaveAs( const config* pConfig, const utf8* fpath );

/************************/
/*  Get & Set           */
/************************/
/****** Get *************************************************************************/
/*
*   Get the value/content of a config entry by type. It's important you use the
*   correct function as entries are stored as plain strings with limited type
*   checking, using the wrong type will lead to undefined behavior.
*
*   Parameters:
*     - pConfig : Pointer to a 'config' object
*     - section : String matching the entry section the key is in. A nullptr will search the global section
*     - key     : String matching the entry key
*     - def     : Default value that will be returned if no entry exists
*
*   Returns:
        The value/content of the entry, or the 'def' parameter if no entry exists
*/
int32_t     ConfigGetInt(    const config* pConfig, const utf8* section, const utf8* key, int32_t     def );
uint32_t    ConfigGetHex(    const config* pConfig, const utf8* section, const utf8* key, uint32_t    def );
uint32_t    ConfigGetOct(    const config* pConfig, const utf8* section, const utf8* key, uint32_t    def );
bool        ConfigGetBool(   const config* pConfig, const utf8* section, const utf8* key, bool        def );
f64         ConfigGetFloat(  const config* pConfig, const utf8* section, const utf8* key, f64         def );
const utf8* ConfigGetString( const config* pConfig, const utf8* section, const utf8* key, const utf8* def );

/****** Set *************************************************************************/
/*
*   Set the value/content of a config entry by type; if no entry exists under the
*   given 'section' and 'key', one will be created.
*
*   Parameters:
*     - pConfig : Pointer to a 'config' object
*     - section : String matching the section the key is in. A nullptr will search the global section
*     - key     : String matching the key
*     - set     : Value the key will be set to
*/
void    ConfigSetInt(    config* pConfig, const utf8* section, const utf8* key, int32_t     set );
void    ConfigSetHex(    config* pConfig, const utf8* section, const utf8* key, uint32_t    set );
void    ConfigSetOct(    config* pConfig, const utf8* section, const utf8* key, uint32_t    set );
void    ConfigSetBool(   config* pConfig, const utf8* section, const utf8* key, bool        set );
void    ConfigSetFloat(  config* pConfig, const utf8* section, const utf8* key, f64         set );
void    ConfigSetString( config* pConfig, const utf8* section, const utf8* key, const utf8* set );

/************************/
/*  Config Query        */
/************************/
/****** Has *************************************************************************/
/*
*   Check if config object contains a specified section &/or key.
*
*   Parameters:
*     - pConfig : Pointer to a 'config' object
*     - section : String matching the queried section, or section the queried key is in
*     - key     : String matching the queried key
*
*   Returns:
*       If the given section/key exists
*/
bool    ConfigHasSection( const config* pConfig, const utf8* section                  );
bool    ConfigHasKey(     const config* pConfig, const utf8* section, const utf8* key );

EXTERN_END

#endif/*H_SAMT_CONFIG*/
